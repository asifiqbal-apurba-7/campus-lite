clear;
close all
for nodefactor = 2
overloop = {[1 2 2]}; %[1 2 2],[1 1 1],[2 2 1]};
for oloop = 1:1:length(overloop)
    tic;
%% constants and inputs
% geometry and meshing
Lx = 0.055;     % Length in m
Ly = 0.055;     % Width in m
t = 25.4E-6;    % thickness of the wire in m
Lw = 0.005;     % width of the line in m
% nodefactor = 20; % mesh size multiplication
nodex = round(Lx/Lw)*2*nodefactor;      % node in x direction Recomended
nodey = round(Ly/Lw)*2*nodefactor;      % node in y direction Recomended
nodew = 2*nodefactor;                   % node along line width direction Recomended
relp = 1.0;             % relaxation factor for SOR-GS iteration
relpx = 1-relp;         % relaxation factor for SOR-GS iteration
relt = 1.0;             % relaxation factor for SOR-GS iteration
reltx = 1-relt;         % relaxation factor for SOR-GS iteration

% condition inputs
J = 3e8;          % Desired current input
T0 = 300;           % room temperature(ambient) in K
Tb = 320;
hconv = 10;        % convection co-efficient for boundaries
hconvf = 10;       % convection co-efficient for top surface
hconst = 1;         % percentage of heat flow through unreal boundaries

% constants
Kb = 1.38e-23;      % boltzman constant
N = 100;            % atomic concentration per micrometercube for metercube multiply 10^18
e = 1.602e-19;      % charge of electron

% material properties
P1 = overloop{oloop}(1);             % for Al-Cu-Al configuration p1=1 and for Cu-Al-Cu configuration p1=2
P2 = overloop{oloop}(2);             % for Al-Cu-Al configuration p2=2 and for Cu-Al-Cu configuration p2=1
pwr = overloop{oloop}(3);            % power of the polynomial
% P1 = 1;             % for Al-Cu-Al configuration p1=1 and for Cu-Al-Cu configuration p1=2
% P2 = 1;             % for Al-Cu-Al configuration p2=2 and for Cu-Al-Cu configuration p2=1
% pwr = 1;            % power of the polynomial

matname(1) = {'Aluminum'};
rho0(1) = 2.440e-8;                      % Electrical Resistivity at 273.16K
alpha(1) = .0043;                        % thermal co-efficient of resistivity
ak(1) = 222.42;                          % a of the conductivity eqn a+bT+cT^2
bk(1) = 0.0701;                          % b of the conductivity eqn a+bT+cT^2
ck(1) = -9e-5;                           % c of the conductivity eqn a+bT+cT^2
Tmelt(1) = 660.3+273.16;                 % melting temperature in K
acp(1) = 746.49;                         % a of the conductivity eqn a+bT+cT^2
bcp(1) = 0.4547;                         % b of the conductivity eqn a+bT+cT^2
ccp(1) = 7e-5;                           % c of the conductivity eqn a+bT+cT^2
d(1) = 2710;                             % densit kg/m^3


matname(2) = {'Copper'};
rho0(2) = 1.68e-8;                       %  Electrical Resistivity at 273.16K
alpha(2) = .00386;                       % thermal co-efficient of resistivity
ak(2) = 426.62;                          % a of the conductivity eqn a+bT+cT^2
bk(2) = -0.0853;                         % b of the conductivity eqn a+bT+cT^2
ck(2) = 1e-5;                            % c of the conductivity eqn a+bT+cT^2
Tmelt(2) = 1084+273.16;                  % melting temperature in K
acp(2) = 341.23;                         % a of the conductivity eqn a+bT+cT^2
bcp(2) = 0.1369;                         % b of the conductivity eqn a+bT+cT^2
ccp(2) = -2e-5;                          % c of the conductivity eqn a+bT+cT^2
d(2) = 8940;                             % density kg/m^3

% tolerances
toleranceP = 1e-5;  % setting up the Potential tolerance(Recomended 10^(-10))
toleranceR = 1e-3;  % setting up the Resistivity tolerance(Recomended 10^(-3))
toleranceT = 1e-10; % setting up the Temperature tolerance(Recomended 10^(-10))
toleranceK = 1e-3;  % setting up the Thermal conductivity tolerance(Recomended 10^(-3))

% starting printables
fprintf('---------------------------------\n');
fprintf('material: %s-%s-%s\n',matname{P1},matname{P2},matname{P1});
fprintf('mesh: %.fX%.f\n',nodex,nodey);
fprintf('elements along armwidth: %.d\n',nodew);
fprintf('power of plynomial of mixture law: %.d\n',pwr);
fprintf('Potential tolerance: %0.2d \nTemperature tolerance %0.2d\n',toleranceP,toleranceT);
fprintf('current density: %0.2d\n',J);

%% calculating values of different variables
area = t*Lw;                                                    %cross-sectional area along x_direction
hofx = Lx/nodex;                                                %step size along x
hofy = Ly/nodey;                                                %step size along y
hx = hofx^2;                                                    %square of step
hy = hofy^2;                                                    %square of step
trigger_tempt = 1;                                              %time dep Temp solver trigger
trigger_bound = 1;                                              %boundary definning trigger
trigger_f = 0;                                                  %failure trigger
frame = 5;                                                      %standard frame no. for animation
hillnodes = 1;                                                  %node allowance for hilloc

%% defining the matrices
B = zeros(nodey+1+2*hillnodes,nodex+1+2*hillnodes);     %Geometric definition matrix
Potential = B;          %Potential matrix
Potential1 = B;         %Temporary potential matrix
Heatgen = B;            %Heat generation matrix
Temp = B+Tb;           %SS Temperature matrix
Temp1 = B+Tb;          %SS Temporary Temperature matrix
Tempk = B+Tb;          %USS Temperature matrix
Tempk1 = B+Tb;         %USS temporary Temperature matrix
Tempk2 = B+Tb;         %USS temporary Temperature matrix
Jx = B;                 %Current density matrix along x axis
Jy = B;                 %Current density matrix along y axis
gradPx = B;             %Potential gradient matrix along x axis
gradPy = B;             %Potential gradient matrix along y axis
gradTx = B;             %Temperature gradient matrix along x axis
gradTy = B;             %Temperature gradient matrix along y axis
gradR0x = B;            %Atomic concentration gradient matrix along x axis
gradR0y = B;            %Atomic concentration gradient matrix along y axis
gradAlphax = B;
gradAlphay = B;
gradKx = B;
gradKy = B;
linediagram = B;

%% defining boundary, internal and external points
p1i = 1+hillnodes;                p1j = 1+hillnodes;                    %co-ordinate of point 1
p2i = nodew+1+hillnodes;          p2j = 1+hillnodes;                    %co-ordinate of point 2
p3i = 1+hillnodes;                p3j = nodex+1+hillnodes;              %co-ordinate of point 3
p4i = nodew+1+hillnodes;          p4j = (nodex-nodew)+1+hillnodes;      %co-ordinate of point 4
p5i = nodey+1+hillnodes;          p5j = nodex+1+hillnodes;
p6i = nodey+1+hillnodes;          p6j = nodex-nodew+1+hillnodes;
p7i = nodew/2+1+hillnodes;        p7j = nodex-nodew/2+1+hillnodes;
xpoints = [p1j p3j p5j p6j p4j p2j p1j];
ypoints = [p1i p3i p5i p6i p4i p2i p1i];
% defining the main Z line
for i=1+hillnodes:1:nodey+1+hillnodes
    for j = 1+hillnodes:1:nodex+1+hillnodes
        if ((i >= p1i && i <= p4i) && (j >= p1j && j <= p4j)) || ((i >= p3i && i <= p6i) && (j >= p6j && j <= p3j)) %interior nodes x-central-y-central FDM
            B(i,j) = 11;
        end
    end
end
B(nodew/2+1+hillnodes,nodex-nodew/2+1+hillnodes) = 10;            % the middle anchoring point

%% FGM properties Distribution
Rho0 = FGMDistrubution(rho0,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');
Alpha = FGMDistrubution(alpha,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');
aK = FGMDistrubution(ak,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');
bK = FGMDistrubution(bk,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');
cK = FGMDistrubution(ck,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');
aCp = FGMDistrubution(acp,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');
bCp = FGMDistrubution(bcp,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');
cCp = FGMDistrubution(ccp,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');
D = FGMDistrubution(d,nodex,nodey,nodew,hillnodes,P1,P2,pwr,'L');

Kcond = aK+bK.*Tempk+cK.*Tempk.^2;
Cp = aCp+bCp.*Tempk+cCp.*Tempk.^2;
Rho = Rho0.*(1+Alpha.*(Tempk-273.16));

%% Defining current input
Jx(p1i:p2i,p1j:p2j) = J;
Jy(p6i:p5i,p6j:p5j) = J;

%% Defining the boundaries
for i = 1:1:nodey+1+2*hillnodes
    for j = 1:1:nodex+1+2*hillnodes
        if B(i,j) ~= 0 && B(i,j+1) ~= 0 && B(i,j-1) == 0 && B(i+1,j) ~= 0 && B(i-1,j) ~= 0   %Eqivalent to left boundary points
            B(i,j) = 21;
        elseif B(i,j) ~= 0 && B(i,j+1) == 0 && B(i,j-1) ~= 0 && B(i+1,j) ~= 0 && B(i-1,j) ~= 0   %Eqivalent to right boundary points
            B(i,j) = 22;
        elseif B(i,j) ~= 0 && B(i,j+1) ~= 0 && B(i,j-1) ~= 0 && B(i+1,j) ~= 0 && B(i-1,j) == 0   %Eqivalent to bottom boundary points
            B(i,j) = 23;
        elseif B(i,j) ~= 0 && B(i,j+1) ~= 0 && B(i,j-1) ~= 0 && B(i+1,j) == 0 && B(i-1,j) ~= 0   %Eqivalent to top boundary points
            B(i,j) = 24;
        elseif B(i,j) ~= 0 && B(i,j+1) ~= 0 && B(i,j-1) == 0 && B(i+1,j) ~= 0 && B(i-1,j) == 0   %Eqivalent to left bottom boundary points
            B(i,j) = 31;
        elseif B(i,j) ~= 0 && B(i,j+1) ~= 0 && B(i,j-1) == 0 && B(i+1,j) == 0 && B(i-1,j) ~= 0   %Eqivalent to left top boundary points
            B(i,j) = 32;
        elseif B(i,j) ~= 0 && B(i,j+1) == 0 && B(i,j-1) ~= 0 && B(i+1,j) == 0 && B(i-1,j) ~= 0   %Eqivalent to right top boundary points
            B(i,j) = 33;
        elseif B(i,j) ~= 0 && B(i,j+1) == 0 && B(i,j-1) ~= 0 && B(i+1,j) ~= 0 && B(i-1,j) == 0   %Eqivalent to right bottom boundary points
            B(i,j) = 34;
        end
    end
end
nB = nnz(B);                                                % number of nodes in the initial specimen
fprintf('total number of nodes: %0.0d\n',nB);
% time = input('Input time duration in seconds:');            % desired time duration
time = 0.6;
hoft = 0.001;
%% Solution
kplot = 1;
timelap = 0;
eP(1e7) = 100;
Tplot = [];
for timeloop = 0:hoft:time+hoft
    
    B(p4i,p4j) = 11;
    [gradKx,gradKy] = grad(B,Kcond,nodex,nodey,hillnodes,hofx,hofy);
    [gradTx,gradTy] = grad(B,Tempk,nodex,nodey,hillnodes,hofx,hofy);
    [gradR0x,gradR0y] = grad(B,Rho0,nodex,nodey,hillnodes,hofx,hofy);
    [gradAlphax,gradAlphay] = grad(B,Alpha,nodex,nodey,hillnodes,hofx,hofy);
    B(p4i,p4j) = 50;

    kP = 1;  %initializing iteration vlue
    errorP = 100;    %setting initial error
    while errorP >= toleranceP
        for i = p1i:1:p4i
            for j = p1j:1:p3j
                if B(i,j) == 0
                    continue;
                elseif B(i,j) == 11 || B(i,j) == 50 %interior nodes x-central-y-central FDM
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 21  %Eqivalent to left boundary points (x-forward-y-central FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 22 %Eqivalent to right boundary points (x-backward-y-central FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue; 
                elseif B(i,j) == 23 %Eqivalent to bottom boundary points (x-central-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 24 %Eqivalent to top boundary points (x-central-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 31  %Eqivalent to left bottom boundary points (x-forward-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 32  %Eqivalent to left top boundary points (x-forward-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 33  %Eqivalent to right top boundary points (x-backward-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 34 %Eqivalent to right bottom boundary points (x-backward-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 10 %interior nodes x-central-y-central FDM
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                end
            end
        end
        for j = p4j:1:p3j
            for i = p3i:1:p5i
                if B(i,j) == 0
                    continue;
                elseif B(i,j) == 11 || B(i,j) == 50 %interior nodes x-central-y-central FDM
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 21  %Eqivalent to left boundary points (x-forward-y-central FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 22 %Eqivalent to right boundary points (x-backward-y-central FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue; 
                elseif B(i,j) == 23 %Eqivalent to bottom boundary points (x-central-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 24 %Eqivalent to top boundary points (x-central-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 31  %Eqivalent to left bottom boundary points (x-forward-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 32  %Eqivalent to left top boundary points (x-forward-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 33  %Eqivalent to right top boundary points (x-backward-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 34 %Eqivalent to right bottom boundary points (x-backward-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 10 %interior nodes x-central-y-central FDM
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                end
            end
        end
        
        for j = p3j:-1:p4j
            for i = p5i:-1:p3i
                if B(i,j) == 0
                    continue;
                elseif B(i,j) == 11 || B(i,j) == 50 %interior nodes x-central-y-central FDM
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 21  %Eqivalent to left boundary points (x-forward-y-central FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 22 %Eqivalent to right boundary points (x-backward-y-central FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue; 
                elseif B(i,j) == 23 %Eqivalent to bottom boundary points (x-central-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 24 %Eqivalent to top boundary points (x-central-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 31  %Eqivalent to left bottom boundary points (x-forward-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 32  %Eqivalent to left top boundary points (x-forward-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 33  %Eqivalent to right top boundary points (x-backward-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 34 %Eqivalent to right bottom boundary points (x-backward-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 10 %interior nodes x-central-y-central FDM
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                end
            end
        end
        for i = p4i:-1:p1i
            for j = p3j:-1:p1j
                if B(i,j) == 0
                    continue;
                elseif B(i,j) == 11 || B(i,j) == 50 %interior nodes x-central-y-central FDM
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 21  %Eqivalent to left boundary points (x-forward-y-central FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 22 %Eqivalent to right boundary points (x-backward-y-central FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue; 
                elseif B(i,j) == 23 %Eqivalent to bottom boundary points (x-central-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 24 %Eqivalent to top boundary points (x-central-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 31  %Eqivalent to left bottom boundary points (x-forward-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 32  %Eqivalent to left top boundary points (x-forward-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*hofx*Rho(i,j)*Jx(i,j)+2*Potential(i,j+1))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 33  %Eqivalent to right top boundary points (x-backward-y-backward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(2*Potential(i-1,j)-2*hofy*Rho(i,j)*Jy(i,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 34 %Eqivalent to right bottom boundary points (x-backward-y-forward FDM)
                    Potential(i,j) = relpx*Potential(i,j)+relp*((2*Potential(i,j-1)-2*hofx*Rho(i,j)*Jx(i,j))*Rho(i,j)/hx+(2*hofy*Rho(i,j)*Jy(i,j)+2*Potential(i+1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(-2*hofx*Rho(i,j)*Jx(i,j))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(-2*hofy*Rho(i,j)*Jy(i,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                elseif B(i,j) == 10 %interior nodes x-central-y-central FDM
                    Potential(i,j) = relpx*Potential(i,j)+relp*((Potential(i,j+1)+Potential(i,j-1))*Rho(i,j)/hx+(Potential(i+1,j)+Potential(i-1,j))*Rho(i,j)/hy-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0x(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphax(i,j)+Rho0(i,j)*Alpha(i,j)*gradTx(i,j))*(Potential(i,j+1)-Potential(i,j-1))/2/hofx-((1+Alpha(i,j)*(Tempk(i,j)-273.16))*gradR0y(i,j)+Rho0(i,j)*(Tempk(i,j)-273.16)*gradAlphay(i,j)+Rho0(i,j)*Alpha(i,j)*gradTy(i,j))*(Potential(i+1,j)-Potential(i-1,j))/2/hofy)/(2/hx+2/hy)/Rho(i,j);
                    continue;
                end
            end
        end
        temp = abs((Potential-Potential1)./Potential1.*100);   %taking the absolute difference of two potential matrices
        errorP = max(max(temp));    %collecting error data
        eP(kP) = errorP;    %storing error data for plotting
        Potential1 = Potential;   %updating the temporary matrix
        kP = kP+1;    %updating iteration number
    end
    tpot = toc;
    eP = eP(1:kP-1);    %getting rid of unused pre-allocated errors
    
    B(p4i,p4j) = 11;
    [gradPx,gradPy] = grad(B,Potential,nodex,nodey,hillnodes,hofx,hofy);
    Heatgen = gradPx.^2+gradPy.^2;
    B(p4i,p4j) = 50;
            
    kT = 1;  %initializing iteration vlue
    errorT = 100;    %setting initial error
    while errorT >= toleranceT && errorT ~= 0
        for i = p1i:1:p5i
            for j = p1j:1:p5j
                if B(i,j) == 0
                    continue
                elseif B(i,j) ==  11 || B(i,j) ==  10  %the central node
                    Tempk(i,j) = (((aK(i,j+1)+bK(i,j+1)*Tempk(i,j+1)+cK(i,j+1)*Tempk(i,j+1)^2)-(aK(i,j-1)+bK(i,j-1)*Tempk(i,j-1)+cK(i,j-1)*Tempk(i,j-1)^2))*(Tempk(i,j+1)-Tempk(i,j-1))/4/hx+((aK(i+1,j)+bK(i+1,j)*Tempk(i+1,j)+cK(i+1,j)*Tempk(i+1,j)^2)-(aK(i-1,j)+bK(i-1,j)*Tempk(i-1,j)+cK(i-1,j)*Tempk(i-1,j)^2))*(Tempk(i+1,j)-Tempk(i-1,j))/4/hy+(aK(i,j)+bK(i,j)*Tempk(i,j)+cK(i,j)*Tempk(i,j)^2)*((Tempk(i,j+1)+Tempk(i,j-1))/hx+(Tempk(i+1,j)+Tempk(i-1,j))/hy)+hconvf*T0/t+Heatgen(i,j)/Rho0(i,j)/(1+Alpha(i,j)*(Tempk(i,j)-273.16))+Tempk1(i,j)*D(i,j)*(aCp(i,j)+bCp(i,j)*Tempk(i,j)+cCp(i,j)*Tempk(i,j)^2)/hoft)/(D(i,j)*(aCp(i,j)+bCp(i,j)*Tempk(i,j)+cCp(i,j)*Tempk(i,j)^2)/hoft+(aK(i,j)+bK(i,j)*Tempk(i,j)+cK(i,j)*Tempk(i,j)^2)*(2/hx+2/hy)+hconvf/t);
                    continue;
                end
            end
        end
        for j = p5j:-1:p1j
            for i = p5i:-1:p1i
                if B(i,j) == 0
                    continue
                elseif B(i,j) ==  11 || B(i,j) ==  10  %the central node
                    Tempk(i,j) = (((aK(i,j+1)+bK(i,j+1)*Tempk(i,j+1)+cK(i,j+1)*Tempk(i,j+1)^2)-(aK(i,j-1)+bK(i,j-1)*Tempk(i,j-1)+cK(i,j-1)*Tempk(i,j-1)^2))*(Tempk(i,j+1)-Tempk(i,j-1))/4/hx+((aK(i+1,j)+bK(i+1,j)*Tempk(i+1,j)+cK(i+1,j)*Tempk(i+1,j)^2)-(aK(i-1,j)+bK(i-1,j)*Tempk(i-1,j)+cK(i-1,j)*Tempk(i-1,j)^2))*(Tempk(i+1,j)-Tempk(i-1,j))/4/hy+(aK(i,j)+bK(i,j)*Tempk(i,j)+cK(i,j)*Tempk(i,j)^2)*((Tempk(i,j+1)+Tempk(i,j-1))/hx+(Tempk(i+1,j)+Tempk(i-1,j))/hy)+hconvf*T0/t+Heatgen(i,j)/Rho0(i,j)/(1+Alpha(i,j)*(Tempk(i,j)-273.16))+Tempk1(i,j)*D(i,j)*(aCp(i,j)+bCp(i,j)*Tempk(i,j)+cCp(i,j)*Tempk(i,j)^2)/hoft)/(D(i,j)*(aCp(i,j)+bCp(i,j)*Tempk(i,j)+cCp(i,j)*Tempk(i,j)^2)/hoft+(aK(i,j)+bK(i,j)*Tempk(i,j)+cK(i,j)*Tempk(i,j)^2)*(2/hx+2/hy)+hconvf/t);
                    continue;
                end
            end
        end
        temp = abs((Tempk-Tempk2)./Tempk2.*100);   %taking the absolute error of two Temperature matrices
        errorT = max(max(temp));    %collecting error data
        Tempk2 = Tempk;   %updating the temporary matrix
        kT = kT+1;    %updating iteration number
    end
    Tempk1 = Tempk;
    if timelap == round(timeloop/hoft)
        Tplot(kplot) = Tempk(p7i,p7j);
        timelap = timelap+round(hoft/hoft);
%         figure(1)
%         plot(1000*(hoft:hoft:kplot*hoft),Tplot,'r','LineWidth',2);
%         title('Temperature of Reentrant Corner')
%         xlabel('Time(ms)')
%         ylabel('Temperature (K)')
%         set(gca,'FontSize',15)
%         grid on
        kplot = kplot+1;
    end
    Kcond = aK+bK.*Tempk+cK.*Tempk.^2;
    Cp = aCp+bCp.*Tempk+cCp.*Tempk.^2;
    Rho = Rho0.*(1+Alpha.*(Tempk-273.16));
%     Kcond = aK+bK*Tb+cK*Tb^2;
%     Cp = aCp+bCp*Tb+cCp*Tb^2;
%     Rho = Rho0.*(1+Alpha*(Tb-273.16));
end
toc
Potential(B == 0) = nan;
Tempk(B == 0) = nan;

%% post processing
fprintf('Maximum Potential: %0.8fmV\n',1000*max(max(Potential)));
fprintf('Minimum Potential: %0.8fmV\n',1000*min(min(Potential)));
fprintf('Maximum Temperature: %0.4fK\n',max(max(Tempk)));
fprintf('Minimum Temperature: %0.4fK\n\n',min(min(Tempk)));
Data = [];
fig = figure(1);
plot(1000*(0:hoft:timeloop),Tplot,'r','LineWidth',2);
title('Temperature of Reentrant Corner')
xlabel('Time(ms)')
ylabel('Temperature (K)')
set(gca,'FontSize',15)
grid on
Data{1}(:,1) = (hoft:hoft:(kplot-1)*hoft)*1000';
Data{1}(:,2) = (Tplot)';
%writematrix(Data,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_Tempvstime_line.dat'],'Delimiter','tab');
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_tempvstime.png']);

Jmatx = -1*gradPx./Rho;
Jmaty = -1*gradPy./Rho;
Jmat = sqrt(Jmatx.^2+Jmaty.^2);
gradT = sqrt(gradTx.^2+gradTy.^2);

EMflux = Tempk+(Potential.^2)./Kcond./Rho/2;
B(p4i,p4j) = 11;
[gradEMHx,gradEMHy] = grad(B,EMflux,nodex,nodey,hillnodes,hofx,hofy);
gradEMHx = -Kcond.*gradEMHx;
gradEMHy = -Kcond.*gradEMHy;
EMH = sqrt(gradEMHx.^2+gradEMHy.^2);
EMH(B == 0) = nan;

Data2 = [1000*max(max(Potential));1000*min(min(Potential));max(max(Tempk));min(min(Tempk));max(max(EMH));min(min(EMH));nB];
%writematrix(Data2,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_Responses.dat'],'Delimiter','tab');

%Pot surf
fig = figure(2);
contourf((-hofx*hillnodes/(Lx+hofx*hillnodes):hofx/(Lx+hofx*hillnodes):1),(-hofy*hillnodes/(Ly+hofy*hillnodes):hofy/(Ly+hofy*hillnodes):1),Potential,50,'LineStyle','none');
% title('Potential Distribution')
xlabel('Axial position, x/L_x')
ylabel('Lateral position, y/L_y')
colorbar eastoutside
colormap default
axis equal
daspect([Ly/Lx 1 1])
set(gca,'FontSize',25)
xticks([0 0.2 0.4 0.6 0.8 1])
yticks([0 0.2 0.4 0.6 0.8 1])
%set(gcf, 'Position', get(0, 'Screensize'))
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_pot_surf.png']);
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_pot_surf.pdf']);
%close(fig);

%Temp surf
fig = figure(3);
contourf((-hofx*hillnodes/(Lx+hofx*hillnodes):hofx/(Lx+hofx*hillnodes):1),(-hofy*hillnodes/(Ly+hofy*hillnodes):hofy/(Ly+hofy*hillnodes):1),Tempk,50,'LineStyle','none');
% title('Temperature Distribution')
xlabel('Axial position, x/L_x')
ylabel('Lateral position, y/L_y')
colorbar eastoutside
colormap default
axis equal
daspect([Ly/Lx 1 1])
set(gca,'FontSize',25)
xticks([0 0.2 0.4 0.6 0.8 1])
yticks([0 0.2 0.4 0.6 0.8 1])
%set(gcf, 'Position', get(0, 'Screensize'))
colorbar('Ticks', 320:5:355);
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_temp_surf.png']);
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_temp_surf.pdf']);
%close(fig);

%Electro-magnetic Heat Flux surf
fig = figure(4);
contourf((-hofx*hillnodes/(Lx+hofx*hillnodes):hofx/(Lx+hofx*hillnodes):1),(-hofy*hillnodes/(Ly+hofy*hillnodes):hofy/(Ly+hofy*hillnodes):1),EMH,50,'LineStyle','none');
% title('Electro-thermal Heat Flux Distribution')
xlabel('Axial position, x/L_x')
ylabel('Lateral position, y/L_y')
colorbar eastoutside
colormap default
axis equal
daspect([Ly/Lx 1 1])
set(gca,'FontSize',25)
xticks([0 0.2 0.4 0.6 0.8 1])
yticks([0 0.2 0.4 0.6 0.8 1])
%set(gcf, 'Position', get(0, 'Screensize'))
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_emhf_surf.png'])
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_emhf_surf.pdf'])
%close(fig);
%%
Data{2} = [];
%Pot line
fig = figure(5);
plot(0:1/(p7j-p1j+p5i-p7i):1,[Potential(p7i,p1j:1:p7j-1) Potential(p7i:p5i,p7j)']*1000','r','LineWidth',2);
title('Potential Distribution')
xlabel('x/L')
ylabel('Potential')
set(gca,'FontSize',25)
grid on
%set(gcf, 'Position', get(0, 'Screensize'))
%writematrix(Data,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_pot_line.dat'],'Delimiter','tab');
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_pot_line.png'])
%close(fig);

%Temp line
fig = figure(6);
plot(0:1/(p7j-p1j+p5i-p7i):1,[Tempk(p7i,p1j:1:p7j-1) Tempk(p7i:p5i,p7j)'],'r','LineWidth',2);
title('Temperature Distribution')
xlabel('x/L')
ylabel('Temperature')
set(gca,'FontSize',25)
grid on

%set(gcf, 'Position', get(0, 'Screensize'))
%writematrix(Data,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_Temp_line.dat'],'Delimiter','tab');
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_temp_line.png'])
%close(fig);

%Electro-magnetic Heat Flux line
fig = figure(7);
plot(0:1/(p7j-p1j+p5i-p7i):1,[EMH(p7i,p1j:1:p7j-1) EMH(p7i:p5i,p7j)'],'r','LineWidth',2);
title('Electro-thermal Heat Flux Distribution')
xlabel('x/L')
ylabel('Electro-thermal Heat Flux')
set(gca,'FontSize',25)
grid on

%set(gcf, 'Position', get(0, 'Screensize'))
%writematrix(Data,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_EMH_line.dat'],'Delimiter','tab');
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_emhf_line.png'])
%close(fig);

% y = 0.25
Data{2}(:,1) = (0:1/((1*p4j/4+3*p3j/4)-p1j+p5i-(1*p4i/4+3*p3i/4)):1)';
Data{2}(:,2) = [Potential((1*p4i/4+3*p3i/4),p1j:1:(1*p4j/4+3*p3j/4)-1) Potential((1*p4i/4+3*p3i/4):1:p5i,(1*p4j/4+3*p3j/4))']*1000';
Data{2}(:,3) = [Tempk((1*p4i/4+3*p3i/4),p1j:1:(1*p4j/4+3*p3j/4)-1) Tempk((1*p4i/4+3*p3i/4):1:p5i,(1*p4j/4+3*p3j/4))']';
Data{2}(:,4) = [EMH((1*p4i/4+3*p3i/4),p1j:1:(1*p4j/4+3*p3j/4)-1) EMH((1*p4i/4+3*p3i/4):1:p5i,(1*p4j/4+3*p3j/4))']';
% y = 0.50
Data{5}(:,1) = (0:1/((2*p4j/4+2*p3j/4)-p1j+p5i-(2*p4i/4+2*p3i/4)):1)';
Data{5}(:,2) = [Potential((2*p4i/4+2*p3i/4),p1j:1:(2*p4j/4+2*p3j/4)-1) Potential((2*p4i/4+2*p3i/4):1:p5i,(2*p4j/4+2*p3j/4))']*1000';
Data{5}(:,3) = [Tempk((2*p4i/4+2*p3i/4),p1j:1:(2*p4j/4+2*p3j/4)-1) Tempk((2*p4i/4+2*p3i/4):1:p5i,(2*p4j/4+2*p3j/4))']';
Data{5}(:,4) = [EMH((2*p4i/4+2*p3i/4),p1j:1:(2*p4j/4+2*p3j/4)-1) EMH((2*p4i/4+2*p3i/4):1:p5i,(2*p4j/4+2*p3j/4))']';
% y = 0.75
Data{6}(:,1) = (0:1/((3*p4j/4+1*p3j/4)-p1j+p5i-(3*p4i/4+1*p3i/4)):1)';
Data{6}(:,2) = [Potential((3*p4i/4+1*p3i/4),p1j:1:(3*p4j/4+1*p3j/4)-1) Potential((3*p4i/4+1*p3i/4):1:p5i,(3*p4j/4+1*p3j/4))']*1000';
Data{6}(:,3) = [Tempk((3*p4i/4+1*p3i/4),p1j:1:(3*p4j/4+1*p3j/4)-1) Tempk((3*p4i/4+1*p3i/4):1:p5i,(3*p4j/4+1*p3j/4))']';
Data{6}(:,4) = [EMH((3*p4i/4+1*p3i/4),p1j:1:(3*p4j/4+1*p3j/4)-1) EMH((3*p4i/4+1*p3i/4):1:p5i,(3*p4j/4+1*p3j/4))']';
%%
%Current density vector
fig = figure(8);
[Xaxis, Yaxis] = meshgrid(-hofx*hillnodes:hofx:Lx+hofx*hillnodes,-hofy*hillnodes:hofy:Ly+hofy*hillnodes);
hold on;
arrow1 = find(Jmat < (max(max(Jmat))+min(min(Jmat)))/2*0.95);
quiver(Xaxis(arrow1),Yaxis(arrow1),Jmatx(arrow1),Jmaty(arrow1),1,'b');
arrow2 = find((max(max(Jmat))+min(min(Jmat)))/2*0.95 <= Jmat & Jmat <= (max(max(Jmat))+min(min(Jmat)))/2*1.05);
quiver(Xaxis(arrow2),Yaxis(arrow2),Jmatx(arrow2),Jmaty(arrow2),1,'g');
arrow3 = find(Jmat > (max(max(Jmat))+min(min(Jmat)))/2*1.05);
quiver(Xaxis(arrow3),Yaxis(arrow3),Jmatx(arrow3),Jmaty(arrow3),1,'r');
plot((xpoints-hillnodes-1)*hofx,(ypoints-hillnodes-1)*hofy,'k','LineWidth',1);
hold off;
title('Current Density(A/m^2)');
xlabel('Lx (mm)');
ylabel('Ly (mm)');
axis equal;
%set(gcf, 'Position', get(0, 'Screensize'))
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_J_vector.png'])
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_J_vector.pdf'])
%close(fig);

%Temperature gradient vector
fig = figure(9);
[Xaxis, Yaxis] = meshgrid(-hofx*hillnodes:hofx:Lx+hofx*hillnodes,-hofy*hillnodes:hofy:Ly+hofy*hillnodes);
arrow1 = find(gradT < (max(max(gradT))+min(min(gradT)))/2*0.8);
quiver(Xaxis(arrow1),Yaxis(arrow1),gradTx(arrow1),gradTy(arrow1),1,'b');
hold on;
arrow2 = find((max(max(gradT))+min(min(gradT)))/2*0.8 <= gradT & gradT <= (max(max(gradT))+min(min(gradT)))/2*1.2);
quiver(Xaxis(arrow2),Yaxis(arrow2),gradTx(arrow2),gradTy(arrow2),1,'g');
arrow3 = find(gradT > (max(max(gradT))+min(min(gradT)))/2*1.2);
quiver(Xaxis(arrow3),Yaxis(arrow3),gradTx(arrow3),gradTy(arrow3),1,'r');
plot((xpoints-hillnodes-1)*hofx,(ypoints-hillnodes-1)*hofy,'k','LineWidth',1);
hold off;
title('Temperature Gradient(K/m)');
xlabel('Lx (mm)');
ylabel('Ly (mm)');
axis equal;
%set(gcf, 'Position', get(0, 'Screensize'))
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_gradT_vector.png'])
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_gradT_vector.pdf'])
%close(fig);

%Electro-magnetic Heat Flux vector
fig = figure(10);
[Xaxis, Yaxis] = meshgrid(-hofx*hillnodes:hofx:Lx+hofx*hillnodes,-hofy*hillnodes:hofy:Ly+hofy*hillnodes);
arrow1 = find(EMH < (max(max(EMH))+min(min(EMH)))/2*0.8);
quiver(Xaxis(arrow1),Yaxis(arrow1),gradEMHx(arrow1),gradEMHy(arrow1),2,'b');
hold on;
arrow2 = find((max(max(EMH))+min(min(EMH)))/2*0.8 <= EMH & EMH <= (max(max(EMH))+min(min(EMH)))/2*1.2);
quiver(Xaxis(arrow2),Yaxis(arrow2),gradEMHx(arrow2),gradEMHy(arrow2),0.5,'g');
arrow3 = find(EMH > (max(max(EMH))+min(min(EMH)))/2*1.2);
quiver(Xaxis(arrow3),Yaxis(arrow3),gradEMHx(arrow3),gradEMHy(arrow3),0.75,'r');
plot((xpoints-hillnodes-1)*hofx,(ypoints-hillnodes-1)*hofy,'k','LineWidth',1);
hold off;
title('Electro-thermal Heat Flux(W/m^2)');
xlabel('Lx (mm)');
ylabel('Ly (mm)');
axis equal;
% set(gcf, 'Position', get(0, 'Screensize'))
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_emhf_vector.png'])
%saveas(fig,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Matlab\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_emhf_vector.pdf'])
%close(fig);
%%
FGMDrawshape(nodex,nodey,nodew,hillnodes,Lx,Ly,Lw,P1,P2,pwr,'L');
%%
Data{3} = [];
Data31 = [];
Data32 = [];
Data33 = [];
% potential contour
for i = 1:1:nodey+1+2*hillnodes
    for j = 1:1:nodex+1+2*hillnodes
        if B(i,j) == 0
            continue;
        else
            Data31 = [Data31 (j-p1j)/(p3j-p1j)];
            Data32 = [Data32 (i-p3i)/(p5i-p3i)];
            Data33 = [Data33 Potential(i,j)*1000];
        end
    end
end
Data{3}(:,1) = Data31';
Data{3}(:,2) = Data32';
Data{3}(:,3) = Data33';
%writematrix(Data3,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_pot_surf.dat'],'Delimiter','tab');

Data33 = [];
% Temperature contour
for i = 1:1:nodey+1+2*hillnodes
    for j = 1:1:nodex+1+2*hillnodes
        if B(i,j) == 0
            continue;
        else
            Data33 = [Data33 Tempk(i,j)];
        end
    end
end
Data{3}(:,4) = Data33';
%writematrix(Data3,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_temp_surf.dat'],'Delimiter','tab');

Data33 = [];
% Electro-thermal heat flux contour
for i = 1:1:nodey+1+2*hillnodes
    for j = 1:1:nodex+1+2*hillnodes
        if B(i,j) == 0
            continue;
        else
            Data33 = [Data33 EMH(i,j)];
        end
    end
end
Data{3}(:,5) = Data33';
%writematrix(Data3,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_emhf_surf.dat'],'Delimiter','tab');

Data{4} = [];
Data41 = [];
Data42 = [];
Data43 = [];
Data44 = [];
Data45 = [];
% current density
for i = 1:1:nodey+1+2*hillnodes
    for j = 1:1:nodex+1+2*hillnodes
        if B(i,j) == 0
            continue;
        else
            Data41 = [Data41 (j-p1j)/(p3j-p1j)];
            Data42 = [Data42 (i-p3i)/(p5i-p3i)];
            Data43 = [Data43 Jmatx(i,j)];
            Data44 = [Data44 Jmaty(i,j)];
            Data45 = [Data45 Jmat(i,j)];
        end
    end
end
Data{4}(:,1) = Data41';
Data{4}(:,2) = Data42';
Data{4}(:,3) = Data43';
Data{4}(:,4) = Data44';
Data{4}(:,5) = Data45';
%writematrix(Data4,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_J_vector.dat'],'Delimiter','tab');

Data43 = [];
Data44 = [];
Data45 = [];
% Temperature contour
for i = 1:1:nodey+1+2*hillnodes
    for j = 1:1:nodex+1+2*hillnodes
        if B(i,j) == 0
            continue;
        else
            Data43 = [Data43 gradTx(i,j)];
            Data44 = [Data44 gradTy(i,j)];
            Data45 = [Data45 gradT(i,j)];
        end
    end
end
Data{4}(:,6) = Data43';
Data{4}(:,7) = Data44';
Data{4}(:,8) = Data45';
%writematrix(Data4,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_gradT_vector.dat'],'Delimiter','tab');

Data43 = [];
Data44 = [];
Data45 = [];
% Electro-thermal heat flux contour
for i = 1:1:nodey+1+2*hillnodes
    for j = 1:1:nodex+1+2*hillnodes
        if B(i,j) == 0
            continue;
        else
            Data43 = [Data43 gradEMHx(i,j)];
            Data44 = [Data44 gradEMHy(i,j)];
            Data45 = [Data45 EMH(i,j)];
        end
    end
end
Data{4}(:,9) = Data43';
Data{4}(:,10) = Data44';
Data{4}(:,11) = Data45';
%writematrix(Data4,['H:\Essential\Study materials of all undergraduate terms\OneDrive - BUET\4-1 mats\Plot files\Tecplot\L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_',num2str(nodex),'x',num2str(nodey),'_emhf_vector.dat'],'Delimiter','tab');
%%
% save(['L_',num2str(P1),'',num2str(P2),'',num2str(P1),'_',num2str(pwr),'_Workspace.mat']);
end
end
